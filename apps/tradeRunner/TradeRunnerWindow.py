# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import Qt, pyqtSlot
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QTableWidgetItem
import numpy as np
from uiComps.qtGeneration.TradeRunnerWindow_UI import Ui_MainWindow as TradeRunnerWindow_UI
import sys
from dataHandling.Constants import Constants
from dataHandling.TradeManagement.UserDataManagement import getStockListNames
from uiComps.customWidgets.CheckableComboBox import CheckableComboBox


class TradeRunnerWindow(QMainWindow, TradeRunnerWindow_UI):

    bar_types = ['1 min', '2 mins', '3 mins', '5 mins', '15 mins']
    current_selection = None

    def __init__(self):
        QMainWindow.__init__(self)
        TradeRunnerWindow_UI.__init__(self)
        #SymbolFinderImplementation.__init__(self)
        self.setupUi(self)
        self.addCheckableTickerBox()

        self.connectActions()
        self.populateBoxes()
        self.stock_list = dict()


    def addCheckableTickerBox(self):
        self.checkable_ticker_box = CheckableComboBox()
        self.gridLayout_2.addWidget(self.checkable_ticker_box, 0, 3, 1, 1)


    def connectActions(self):
        self.trade_toggle_button.clicked.connect(self.toggleTrading)
        self.data_toggle_button.clicked.connect(self.toggleLiveData)
        self.perform_prep_button.clicked.connect(self.performPreprocessing)
        self.checkable_ticker_box.activated.connect(self.tickerListClicked)
        self.sel_all_button.clicked.connect(self.tickerSelectionToggle)
        self.load_model_button.clicked.connect(self.loadModels)
        self.list_selector.currentIndexChanged.connect(self.loadNewStockList)
        self.bar_selector.currentIndexChanged.connect(self.barSelection)
        

    def populateBoxes(self):
        self.populateListBox()
        self.populateBarBox()


    def populateBarBox(self):
        print("WEVE ADDED THE ITEMS TO BAR_SELECTOR")
        self.bar_selector.blockSignals(True)
        self.bar_selector.addItems(self.bar_types)
        self.bar_selector.blockSignals(False)


    def populateListBox(self):
        self.stock_lists = getStockListNames()
        self.list_selector.blockSignals(True)
        for _, list_name in self.stock_lists:
            self.list_selector.addItem(list_name)
        self.list_selector.blockSignals(False)


    @pyqtSlot(str, dict)
    def apiUpdate(self, signal, sub_signal):
        print(f"TrradingWindow.apiUpdate: {signal}")

