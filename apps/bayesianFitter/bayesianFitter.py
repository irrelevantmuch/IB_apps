# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt, pyqtSlot
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QCompleter, QTableWidgetItem
import numpy as np
from dataHandling.Constants import Constants
from .BayesianFittingWindow import BayesianFittingWindow
from .BayesianModel import fitModel
import sys, threading

from ibapi.order import Order
from ibapi.contract import Contract

import pandas as pd
from datetime import datetime
from pytz import timezone
from dateutil.relativedelta import relativedelta
from PyQt5.QtWidgets import QCompleter

from dataHandling.HistoryManagement.BufferedManager import BufferedDataManager
from dataHandling.SymbolManager import SymbolDataManager
from dataHandling.HistoryManagement.HistoricalDataManagement import HistoricalDataManager

from dataHandling.TradeManagement.UserDataManagement import writeStockList, readStockList, getStockListNames


class BayesianFitter(BayesianFittingWindow):
    
    history_len = 0
    buffered_manager = None


    def __init__(self, history_manager):
        super().__init__()

        self.loadData()
        self.history_manager = history_manager

        self.history_manager.api_updater.connect(self.apiUpdate, Qt.QueuedConnection)
        self.history_manager.mostRecentFirst = True
        print("We don't set a buffered_manager?")
        self.buffered_manager = BufferedDataManager(history_manager, self.stock_list, name="ListBuffer")
        self.buffered_manager.setStockList({self.selected_key: self.stock_list[self.selected_key]})


    def loadData(self):
        self.stock_lists = getStockListNames()
        self.list_selector.blockSignals(True)
        for _, list_name in self.stock_lists:
            self.list_selector.addItem(list_name)
        self.list_selector.blockSignals(False)
        self.loadNewStockList(0)


    def resetTickerList(self):
        print('resetTickerList')
        self.ticker_selection.clear()
        for uid, stock_inf in self.stock_list.items():
            self.ticker_selection.addItem(stock_inf[Constants.SYMBOL])

    def loadNewStockList(self, index):            
        print('loadNewStockList')
        self.stock_list = self.getStockList(index)
        self.resetTickerList()


    def getStockList(self, for_index):            
            file_name, _ = self.stock_lists[for_index]

            if file_name is not None:
                return readStockList(file_name)
            
            return []


    def listSelection(self, value):
        self.loadNewStockList(value)

    
    def tickerSelection(self, value):
        ordered_keys = list(self.stock_list.keys())
        self.selected_key = ordered_keys[value]
        if self.buffered_manager is not None:
            self.buffered_manager.setStockList({self.selected_key: self.stock_list[self.selected_key]})
        

    @pyqtSlot(str, dict)
    def apiUpdate(self, signal, sub_signal):
        print(f"DataFitter.apiUpdate {signal}")

        print(f"It's not this one? {Constants.HISTORICAL_UPDATE_COMPLETE}")
        if signal == Constants.HISTORICAL_GROUP_COMPLETE or signal == Constants.HISTORICAL_UPDATE_COMPLETE:
                bars = self.buffered_manager.existing_buffers[self.selected_key, Constants.FIVE_MIN_BAR]
                #self.history_len = len(bars)
                self.data_plot.setHistoricalData(bars.copy())


    def getCurrentContract(self):
        contract = Contract()
        contract.symbol = self.stock_list[self.selected_key][Constants.SYMBOL]
        contract.secType = Constants.STOCK
        contract.conId = self.selected_key
        contract.exchange = "SMART"
        return contract


    def getCurrentBars(self, starting_bar=0):
        return self.buffered_manager.existing_buffers[self.selected_key, Constants.FIVE_MIN_BAR].iloc[starting_bar:]

    def fitModelToData(self):

        data = self.buffered_manager.existing_buffers[self.selected_key, Constants.FIVE_MIN_BAR]
        fitModel(data)
        

        #TODO this should be in super
    def accepts(self, value):
        return False
