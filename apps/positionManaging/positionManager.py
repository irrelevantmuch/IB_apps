
# Copyright (c) 2024 Jelmer de Vries
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation in its latest version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import pyqtSlot, Qt
from dataHandling.Constants import Constants
from .PositionManagerWindow import PositionManagerWindow
from uiComps.customWidgets.StockListTab import StockListTab, SelectableTabWidget
from uiComps.customWidgets.OptionTabWidget import OptionTabWidget
import decimal
import pandas as pd

from dataHandling.UserDataManagement import readPositionTypes, writePositionTypes


class PositionManager(PositionManagerWindow):

    position_types = dict()
    split_counts = dict()

    def __init__(self, position_manager):
        super().__init__()

        self.position_manager = position_manager
        self.data_object = self.position_manager.getDataObject()
        self.data_object.position_signal.connect(self.positionUpdate, Qt.QueuedConnection)
    
        self.addTabs()
        

    def addTabs(self):
        self.long_tab = StockListTab(self.data_object, 'STOCKS_LONG')
        self.short_tab = StockListTab(self.data_object, 'STOCKS_SHORT')
        self.all_tab = StockListTab(self.data_object, 'ALL')
        self.options_tab = OptionTabWidget(self.data_object, Constants.OPTION)
        self.tabWidget.addTab(self.long_tab, "Longs")
        self.tabWidget.addTab(self.short_tab, "Shorts")
        self.tabWidget.addTab(self.options_tab, "Options")
        self.tabWidget.addTab(self.all_tab, "All")


    @pyqtSlot(str, dict)
    def positionUpdate(self, signal, sub_signal):
        pass


        #TODO this should be in super
    def accepts(self, value):
        return False

