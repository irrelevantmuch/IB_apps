# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtWidgets, QtCore
from uiComps.generalUIFunctionality import ProcessorWindow
from uiComps.qtGeneration.Comparison_UI import Ui_MainWindow as Comparison_UI
from dataHandling.Constants import Constants
from dataHandling.UserDataManagement import getStockListNames
from dataHandling.Constants import TableType
from uiComps.customWidgets.PlotWidgets.ComparisonPlotWidget import ComparisonPlotWidget
from uiComps.customWidgets.CheckableComboBox import CheckableComboBox


class ComparisonWindow(ProcessorWindow, Comparison_UI):

    period_options = ['Day', '2 Day', '5 Day', 'Month', '2 Months', 'Max']
    corr_period_options = ["2 hours", "4 hours", "Today", "24 hours", "1 week", "2 week", "Month", "2 Months", "3 Months", "6 Months", "Max"]

    def __init__(self, bar_types):
        ProcessorWindow.__init__(self)
        Comparison_UI.__init__(self)

        self.bar_types = bar_types
        self.setupUi(self)
        self.date_picker.setDateTime(QtCore.QDateTime.currentDateTime())

        self.list_of_tables = [self.auto_corr_table]
        self.setupCompBoxes()
        # self.connectScrollbars()
        self.setupCorrBoxes()
        self.setupGraphs()
        self.setupActions()
    
        self.prepTables()
        self.keep_up_box.setEnabled(False)
        

    def prepTables(self):
        self.auto_corr_table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.auto_corr_table.table_type = TableType.index_corr

        for tbl in self.list_of_tables:
            tbl.setSortingEnabled(True)
        


#     def connectScrollbars(self):

#         def move_other_scrollbars(idx, bar):
#             scrollbars = {tbl.verticalScrollBar() for tbl in self.list_of_tables}
#             scrollbars.remove(bar)
#             for bar in scrollbars:
#                 bar.setValue(idx)

#         for tbl in self.list_of_tables:
#             scrollbar = tbl.verticalScrollBar()
#             scrollbar.valueChanged.connect(lambda idx,bar=scrollbar: move_other_scrollbars(idx, bar))
# #            self.layout.addWidget(tbl)


    def setupActions(self):
        self.fetch_full_button.clicked.connect(self.fetchData)
        self.fetch_range_button.clicked.connect(self.fetchRangeData)
        self.sel_all_button.clicked.connect(self.toggleSelection)
        # self.ac_period_selector.currentTextChanged.connect(self.periodSelection)
        self.keep_up_box.stateChanged.connect(self.keepUpToDate)
        self.tops_bottoms_box.stateChanged.connect(self.showTopsAndBottoms)
        self.list_selector.currentIndexChanged.connect(self.listSelection)
        self.visible_ticker_box.activated.connect(self.tickerListClicked)
        self.comp_ticker_box.activated.connect(self.tickerCompClicked)
        self.focus_box.activated.connect(self.tickerFocusClicked)
        self.comparison_selector_1.currentIndexChanged.connect(self.comparisonListSelection)
        self.comparison_selector_2.currentIndexChanged.connect(self.comparisonListSelection)
        self.plot_tf_selector.currentIndexChanged.connect(self.changeBarType)
        self.plot_period_selector.currentTextChanged.connect(self.changePeriodDuration)
        self.comp_type_selector.currentTextChanged.connect(self.graphTypeChange)
        self.tab_widget.currentChanged.connect(self.onTabChange)
        self.regular_hours_box.stateChanged.connect(self.regularHourChange)
        self.date_picker.userDateChanged.connect(self.dateChange)
        self.yesterday_close_check.stateChanged.connect(self.yesterdayCloseToggle)


    def setupGraphs(self):
        
        self.compare_plot = ComparisonPlotWidget('comparison_plot')
        self.graph_tab.layout().addWidget(self.compare_plot)
        # self.focus_plot = ComparisonPlotWidget('focus_plot')
        # self.focus_tab.layout().addWidget(self.focus_plot)


    def setupCompBoxes(self):
        self.plot_tf_selector.addItems(self.bar_types)
        self.plot_period_selector.addItems(self.period_options)
        self.comp_type_selector.addItems([Constants.INDEXED, Constants.NORMALIZED])

        self.visible_ticker_box = CheckableComboBox()
        self.property_selection.addWidget(self.visible_ticker_box, 0, 9, 1, 1)

        self.comp_ticker_box = CheckableComboBox()
        self.focus_specs.addWidget(self.comp_ticker_box, 2, 9, 1, 1)

        self.focus_box = CheckableComboBox()
        self.focus_specs.addWidget(self.focus_box, 2, 1, 1, 1)


    def setupCorrBoxes(self):
        self.stock_lists = getStockListNames()
        for file_name, list_name in self.stock_lists:
            self.list_selector.addItem(list_name)
            self.comparison_selector_1.addItem(list_name)
            self.comparison_selector_2.addItem(list_name)

        for item in self.bar_types:
            self.ac_frame_selector.addItem(item)

        for item in self.corr_period_options:
            self.ac_period_selector.addItem(item)


    def onTabChange(self, value):
        pass
#        self.period_selector.setEnabled(value==0)



    def setTableProperties(self):
        pass
        # for column_index in range(2,9):
        #     self.low_table.horizontalHeader().setSectionResizeMode(column_index, QtWidgets.QHeaderView.Stretch)
        #     self.high_table.horizontalHeader().setSectionResizeMode(column_index, QtWidgets.QHeaderView.Stretch)

        # # for column_index in self.step_mapping.keys():
        #     self.step_up_table.horizontalHeader().setSectionResizeMode(column_index, QtWidgets.QHeaderView.ResizeToContents)
        #     self.step_down_table.horizontalHeader().setSectionResizeMode(column_index, QtWidgets.QHeaderView.ResizeToContents)

        #self.step_up_table.horizontalHeader().setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeToContents)


    def setupAlignment(self):
        #TODO: Why is this still here?
        pass
        # alignDelegate = AlignDelegate(self.overview_table)
        # percAlignDelegate = PercAlignDelegate(self.overview_table)
        # bigNumAlignDelegate = BigNumberAlignDelegate(self.overview_table)
        # self.overview_table.setItemDelegateForColumn(1, alignDelegate)
        # self.overview_table.setItemDelegateForColumn(2, alignDelegate)
        # self.overview_table.setItemDelegateForColumn(3, percAlignDelegate)
        # self.overview_table.setItemDelegateForColumn(4, alignDelegate)
        # self.overview_table.setItemDelegateForColumn(5, percAlignDelegate)
        # self.overview_table.setItemDelegateForColumn(6, percAlignDelegate)
        # self.overview_table.setItemDelegateForColumn(7, bigNumAlignDelegate)


 

        

