{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"time",
				"time_period"
			],
			[
				"cal",
				"calculateMinMax"
			],
			[
				"Mover",
				"MoversProcessor"
			],
			[
				"con",
				"contract_details"
			],
			[
				"sec",
				"sec_type"
			],
			[
				"button",
				"button_to_delete"
			],
			[
				"del",
				"delete_button_set"
			],
			[
				"remove",
				"removeDeleteButtonFor"
			],
			[
				"Li",
				"ListManagerWindow"
			],
			[
				"load",
				"loadNewStockList"
			],
			[
				"pyqt",
				"pyqtSignal"
			],
			[
				"Opt",
				"OptionAllPlotWidget"
			],
			[
				"exp",
				"exp_gen"
			],
			[
				"ma",
				"maximum_strike"
			],
			[
				"min",
				"minimum_strike"
			],
			[
				"min_stri",
				"min_strike_box"
			],
			[
				"exc",
				"exchange_rates"
			],
			[
				"Con",
				"Constants"
			],
			[
				"strike",
				"strike_set"
			],
			[
				"OPTION",
				"OPTION_INFO_LOADED"
			],
			[
				"p_and",
				"p_and_l_total"
			],
			[
				"update",
				"updatePlot"
			],
			[
				"upda",
				"updatePlot"
			],
			[
				"option",
				"option_data_manager"
			],
			[
				"Option",
				"OptionAllPlotWidget"
			],
			[
				"start",
				"startConnection"
			],
			[
				"contract",
				"contract_details"
			],
			[
				"Symbo",
				"SymbolManager"
			],
			[
				"tick",
				"tick_type_str"
			],
			[
				"req",
				"req_id"
			],
			[
				"contractDeta",
				"contractDetailsCompleted"
			],
			[
				"fet",
				"fetchContractsIds"
			],
			[
				"indi",
				"indicator_processor"
			],
			[
				"connec",
				"connectSignalsToSlots"
			],
			[
				"proces",
				"processQueue"
			],
			[
				"proce",
				"processUpdates"
			],
			[
				"IBC",
				"IBConnectivtyNew"
			],
			[
				"place",
				"placeComboOrder"
			],
			[
				"Order",
				"OrderManagerOld"
			],
			[
				"IBCon",
				"IBConnectivity"
			],
			[
				"ke",
				"key_list"
			],
			[
				"key",
				"key_list"
			],
			[
				"cance",
				"cancel_uid"
			],
			[
				"__",
				"__init__"
			],
			[
				"historical",
				"historicalDataUpdate"
			],
			[
				"histor",
				"history_manager"
			],
			[
				"order",
				"order_ids"
			],
			[
				"trade_coun",
				"trade_counter_max"
			],
			[
				"trade",
				"trade_ready_list"
			],
			[
				"check",
				"checkForTrade"
			],
			[
				"indica",
				"indicatorUpdate"
			],
			[
				"last",
				"last_indices"
			],
			[
				"prep",
				"prepareForTrade"
			],
			[
				"acti",
				"active_keys"
			],
			[
				"track",
				"trackingUpdate"
			],
			[
				"prio",
				"prioritize_uids"
			],
			[
				"py",
				"pyqtSlot"
			],
			[
				"pro",
				"propagate_updates"
			],
			[
				"prop",
				"prop_type"
			],
			[
				"profit",
				"profit_limit"
			],
			[
				"getOrder",
				"getOrderCount"
			],
			[
				"updateS",
				"updateStairLevels"
			],
			[
				"entr",
				"entry_count"
			],
			[
				"lock",
				"lockForWrite"
			],
			[
				"profi",
				"profit_id"
			],
			[
				"data",
				"dataUpdate"
			],
			[
				"new",
				"new_property"
			],
			[
				"log",
				"logStepEvents"
			],
			[
				"ini",
				"initializeThresholds"
			],
			[
				"getData",
				"getDataObject"
			],
			[
				"ind",
				"indicators"
			],
			[
				"column",
				"column_names"
			],
			[
				"em",
				"ema_columns"
			],
			[
				"col",
				"column_names"
			],
			[
				"ema",
				"ema_padded_frame"
			],
			[
				"compute",
				"computeEMAs"
			],
			[
				"comp",
				"computeRSIs"
			],
			[
				"com",
				"computeSteps"
			],
			[
				"stock",
				"stockCountUpdated"
			],
			[
				"Auto",
				"AutoTraderManager"
			],
			[
				"stop_",
				"stop_limit_check"
			],
			[
				"prof",
				"profit_take_check"
			],
			[
				"stop",
				"stoplossCheck"
			],
			[
				"tab",
				"tab_name"
			],
			[
				"listSe",
				"listSelection"
			],
			[
				"clean",
				"cleanupClosedApp"
			],
			[
				"App",
				"AppLauncher"
			],
			[
				"mes",
				"message_id"
			],
			[
				"tele",
				"telegram_signal"
			],
			[
				"mess",
				"message_type"
			],
			[
				"aler",
				"alert_lines"
			],
			[
				"message",
				"message_properties"
			],
			[
				"ca",
				"capturePlotAsImage"
			],
			[
				"par",
				"parseCommands"
			],
			[
				"selec",
				"selection_type"
			],
			[
				"frame",
				"_frame_buffer"
			],
			[
				"dat",
				"data_object"
			],
			[
				"layout",
				"layoutAboutToBeChanged"
			],
			[
				"Posit",
				"PositionDataManager"
			],
			[
				"accoun",
				"AccountSummaryEnd"
			],
			[
				"mar",
				"marketValue"
			],
			[
				"get",
				"getHistoryManagerIB"
			],
			[
				"fr",
				"freq_type"
			],
			[
				"Qt",
				"QueuedConnection"
			],
			[
				"stat",
				"start_time"
			],
			[
				"bar",
				"bar_types"
			],
			[
				"symo",
				"symbol_name"
			],
			[
				"r",
				"requestContractDetails"
			],
			[
				"ib_",
				"ib_request_signal"
			],
			[
				"getHi",
				"getHistoryManagerIB"
			],
			[
				"histo",
				"history_manager"
			],
			[
				"Position",
				"PositionObject"
			],
			[
				"P",
				"PositionDataModel"
			],
			[
				"Po",
				"PositionDataModel"
			],
			[
				"_p",
				"_parameter"
			],
			[
				"DATA",
				"DATA_DID_CHANGE"
			],
			[
				"table",
				"tableDataUpdate"
			],
			[
				"colu",
				"column_index"
			],
			[
				"selection",
				"selection_type"
			],
			[
				"buffere",
				"buffered_data"
			],
			[
				"position",
				"position_manager"
			],
			[
				"ins",
				"instrument"
			],
			[
				"set",
				"setData"
			],
			[
				"da",
				"data_buffers"
			],
			[
				"new_",
				"new_positions"
			],
			[
				"sub",
				"sub_signal"
			],
			[
				"reqAccon",
				"reqAccountUpdates"
			],
			[
				"ap",
				"apiUpdate"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\n# Copyright (c) 2024 Jelmer de Vries\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation in its latest version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n\nfrom ibapi.contract import Contract\nfrom ibapi.common import BarData\n\nimport pandas as pd\nimport re\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\nfrom pytz import timezone\nimport sys, math, time\nfrom operator import attrgetter\n\n\nfrom generalFunctionality.GenFunctions import dateFromString, dateToString, pdDateFromIBString, dateFromIBString\n\n\nfrom PyQt5.QtCore import QThread, QObject, Qt, pyqtSignal, pyqtSlot, QTimer\nfrom ibapi.contract import Contract\nfrom ibapi.order import Order\nfrom ibapi.common import BarData\nfrom ibapi.ticktype import TickTypeEnum\n\nfrom queue import Queue\n\nfrom dataHandling.HistoryManagement.DataBuffer import DataBuffers\nfrom dataHandling.DataStructures import DetailObject\nfrom dataHandling.Constants import Constants\nfrom dataHandling.IBConnectivity import IBConnectivity\n\n\nclass HistoricalDataManager(IBConnectivity):\n    \n    _uid_by_req = dict()\n    _bar_type_by_req = dict()\n    _grouped_req_ids = []\n    \n    _hist_buffer_reqs = set()       #general log of open history requests, allows for creating unique id's\n    _update_requests = set()        #open updating requests\n    _is_updating = set()\n    _last_update_time = dict()\n    _propagating_updates = dict()\n    _recently_cancelled_req_id = set()\n\n    _priority_uids = []\n    _historicalDFs = dict()          #frames for data collection \n    _request_buffer = []             #buffer holding the historical requests\n    _contract_details = dict()\n\n    update_delay = 10\n    most_recent_first = False       #order in which requests are processed\n\n    _initial_fetch_complete = dict()\n    \n    queue_cap = Constants.OPEN_REQUEST_MAX\n\n    regular_hours = 0\n    controller = None\n    process_owner = None\n\n    cleanup_done_signal = pyqtSignal()\n\n    \n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)        \n        self.data_buffers = DataBuffers(Constants.BUFFER_FOLDER)\n\n\n    def moveToThread(self, thread):\n        self.data_buffers.moveToThread(thread)\n        super().moveToThread(thread)\n\n\n    def getDataBuffer(self):\n        return self.data_buffers\n\n\n    def addNewListener(self, controller, listener_function):\n        self.api_updater.connect(listener_function, Qt.QueuedConnection)\n        self.controller = controller\n\n\n    def lockForCentralUpdating(self, controller):\n        self.controller = controller\n        self.api_updater.emit(Constants.HISTORY_LOCK, dict())\n\n\n    def unlockCentralUpdating(self):\n        self.api_updater.emit(Constants.HISTORY_UNLOCK, dict())\n\n\n    @pyqtSlot(str)\n    def setFrequency(self, frequency):\n        units, metric = re.match(r\"(\\d+)([sm])$\", frequency).groups()\n        if metric == 'm':\n            self.update_delay = 60 * float(units)\n        elif metric == 's':\n            self.update_delay = float(units)\n        \n\n    @pyqtSlot(str)\n    def stopTracking(self, uid):\n        relevant_requests = [req_id for req_id, track_uid in self._uid_by_req.items() if track_uid == uid]\n\n        for req_id in relevant_requests:\n            if req_id in self._is_updating:\n                self.makeRequest({'type': 'cancelHistoricalData', 'req_id': req_id})\n                self._is_updating.remove(req_id)\n            if req_id in self._update_requests:\n                self.makeRequest({'type': 'cancelHistoricalData', 'req_id': req_id})\n                self._update_requests.remove(req_id)\n            if req_id in self._hist_buffer_reqs:\n                self.makeRequest({'type': 'cancelHistoricalData', 'req_id': req_id})\n                self._hist_buffer_reqs.remove(req_id)\n\n        self.performUidCleanupFor(uid)\n        for req_id in relevant_requests:\n            self.performReqIdCleanupFor(req_id)\n\n\n    def performUidCleanupFor(self, uid):\n        print(\"HistoricalDataManager.performUidCleanupFor\")\n        if uid in self._historicalDFs: del self._historicalDFs[uid]\n        if uid in self._last_update_time: del self._last_update_time[uid]\n        if uid in self._priority_uids: self._priority_uids.remove(uid)\n\n\n    def performReqIdCleanupFor(self, req_id):\n        self.processGroupSignal(req_id, supress_signal=True)\n        if req_id in self._uid_by_req: del self._uid_by_req[req_id]\n        if req_id in self._bar_type_by_req: del self._bar_type_by_req[req_id]\n\n        self._recently_cancelled_req_id.add(req_id)\n        \n\n    @pyqtSlot()\n    def cancelActiveRequests(self):\n        delay = 1_000\n        print(f\"HistoricalDataManager.cancelActiveRequests {int(QThread.currentThreadId())}\")\n        self._is_updating = set()\n        self.stopActiveTimers()\n        self.stopActiveRequests()\n\n        QTimer.singleShot(delay, self.performFinalCleanup)\n        \n\n    def performFinalCleanup(self):\n        self.cleanupReqDicts()\n        self.cleanup_done_signal.emit()\n        \n\n    def cleanupReqDicts(self):\n        print(\"HistoricalDataManager.cleanupReqDicts\")\n        self._historicalDFs = dict()\n        self._is_updating = set()\n        self._uid_by_req = dict()\n        self._bar_type_by_req = dict()\n        self._grouped_req_ids = []\n        self._last_update_time = dict()\n        self._priority_uids = []\n\n\n    def stopActiveTimers(self):\n        if hasattr(self, 'history_exec_timer') and (self.history_exec_timer is not None) and self.history_exec_timer.isActive():\n            self.history_exec_timer.stop()\n\n        if hasattr(self, 'earliest_req_timer') and self.earliest_req_timer.isActive():\n            self.earliest_req_timer.stop()\n        \n        self._request_buffer = []\n\n\n    def stopActiveRequests(self):\n        cancelled_ids = []\n        for req_id in self._is_updating:\n            cancelled_ids.append(req_id)\n            self.makeRequest({'type': 'cancelHistoricalData', 'req_id': req_id})\n        self._is_updating = set()\n\n        for req_id in self._update_requests:\n            cancelled_ids.append(req_id)\n            self.makeRequest({'type': 'cancelHistoricalData', 'req_id': req_id})\n        self._update_requests = set()\n\n        for req_id in self._hist_buffer_reqs:\n            cancelled_ids.append(req_id)\n            self.makeRequest({'type': 'cancelHistoricalData', 'req_id': req_id})\n        self._hist_buffer_reqs = set()\n\n\n######## HISTORICAL DATA REQUEST CREATION\n\n\n    @pyqtSlot(DetailObject, datetime, datetime, str)\n    def createRequestsForContract(self, contract_details, start_date, end_date, bar_type):\n        # print(f\"HistoryManagement.createRequestsForContract {contract_details.symbol} {bar_type}\")\n        weeks, days, seconds = self.getTimeSplits(start_date, end_date)\n        \n        requests = self.createBufferRequests(contract_details, end_date, bar_type, weeks, days, seconds)\n\n        if len(requests) > 0:\n            self._request_buffer += requests\n        \n\n    def createBufferRequests(self, contract_details, end_date, bar_type, weeks, days, seconds):\n        requests = []\n        \n        contract = self.getContractFor(contract_details)\n        self._contract_details[contract_details.numeric_id] = contract_details\n\n        chunk_size = self.getWeekChunkSize(bar_type)\n                # Calculate the number of full chunks and the remainder\n        num_chunks, remainder = divmod(weeks, chunk_size)\n        if remainder > 0: num_chunks += 1\n        \n        # Iterate over the chunks\n        for index in range(num_chunks):\n            if index == 0 and remainder > 0:\n                begin_date = end_date - relativedelta(weeks=remainder)\n                requests = self.addRequest(requests, contract, bar_type, f\"{remainder} W\", begin_date, end_date)\n            else:\n                begin_date = end_date - relativedelta(weeks=chunk_size)\n                requests = self.addRequest(requests, contract, bar_type, f\"{chunk_size} W\", begin_date, end_date)\n            \n            end_date = begin_date\n\n        # Handle days\n        if days > 0:\n            begin_date = end_date - relativedelta(days=days)\n            requests = self.addRequest(requests, contract, bar_type, f\"{days} D\", begin_date, end_date)\n            end_date = begin_date\n\n        # Handle seconds\n        if seconds > 0:\n            begin_date = end_date - relativedelta(seconds=seconds)\n\n            requests = self.addRequest(requests, contract, bar_type, f\"{max(seconds, self.getMinSecondsForBarType(bar_type))} S\", begin_date, end_date)\n        \n        return requests\n      \n\n    @pyqtSlot(str)\n    def groupCurrentRequests(self, group_type: str):\n        new_group = set([request.req_id for request in self._request_buffer])\n        self._grouped_req_ids.append({'group_type': group_type, 'group_ids': new_group})\n\n\n    def addRequest(self, requests, contract, bar_type, period, begin_date, end_date):\n\n        req_id = self.getNextBufferReqID()\n        self._hist_buffer_reqs.add(req_id)\n        self.addUIDbyReq(contract.conId, req_id)\n        self._bar_type_by_req[req_id] = bar_type\n        requests.append(HistoryRequest(req_id, contract, end_date, period, bar_type))\n        # print(f\"HistoricalDataManager.addRequest {req_id} {end_date} {period} {bar_type}\")\n        return requests\n\n\n    def getTimeSplits(self, start_date, end_date): \n\n        difference = end_date - start_date\n        total_seconds = int(difference.total_seconds())\n\n            # Define the number of seconds in a day and a week\n        seconds_per_day = 24 * 60 * 60\n        seconds_per_week = 7 * seconds_per_day\n\n            # Calculate the number of weeks, remaining days and seconds\n        num_weeks = total_seconds // seconds_per_week\n        remaining_seconds = total_seconds % seconds_per_week\n        num_days = remaining_seconds // seconds_per_day\n        num_seconds = remaining_seconds % seconds_per_day\n\n        return num_weeks, num_days, num_seconds\n\n\n    @pyqtSlot(dict, str, bool, bool)\n    @pyqtSlot(dict, str, bool, bool, bool)\n    def requestUpdates(self, stock_list, bar_type, keep_up_to_date, propagate_updates=False, prioritize_uids=False):\n        print(f\"HistoryManagement.requestUpdates are we prioritizing? {keep_up_to_date} {propagate_updates}\")\n        # print([stock_inf[Constants.SYMBOL] for _, stock_inf in stock_list.items()])\n\n        for uid, stock_inf in stock_list.items():\n                \n            if prioritize_uids: self._priority_uids.append(uid)\n\n            details = DetailObject(numeric_id=uid, **stock_inf)\n\n            end_date = datetime.now(timezone(Constants.NYC_TIMEZONE))\n            begin_date = stock_inf['begin_date']\n            total_seconds = int((end_date-begin_date).total_seconds())\n\n            self.createUpdateRequests(details, bar_type, total_seconds, keep_up_to_date, propagate_updates)\n\n        self.iterateHistoryRequests(100)        \n\n\n    @pyqtSlot(Contract)\n    def turnOnRealtimeBarsFor(self, contract):        \n        print(\"HistoricalDataManager.turnOnRealtimeBarsFor\")\n        req_id = self.getNextBufferReqID()\n        self._uid_by_req[req_id] = contract.conId\n        self.makeRequest({'type': 'reqRealTimeBars', 'req_id': req_id, 'contract': contract})\n\n\n    @pyqtSlot(str)\n    def turnOffRealtimeBarsFor(self, cancel_uid):\n        print(\"HistoricalDataManager.turnOffRealtimeBarsFor\")\n        for req_id, uid in self._uid_by_req.items():\n            if uid == cancel_uid:\n                self.cancelRealTimeBars(req_id)\n\n\n    def createUpdateRequests(self, contract_details, bar_type, time_in_sec, keep_up_to_date=True, propagate_updates=False):\n        # print(f\"HistoricalDataManager.createUpdateRequests {keep_up_to_date} {propagate_updates}\")\n        req_id = self.getNextBufferReqID()\n        uid = contract_details.numeric_id\n        self._contract_details[uid] = contract_details\n        contract = self.getContractFor(contract_details)\n\n        if keep_up_to_date:\n            self._is_updating.add(req_id)\n            self._initial_fetch_complete[req_id] = False\n\n        self._propagating_updates[req_id] = propagate_updates\n\n        self._historicalDFs[req_id] = pd.DataFrame(columns=[Constants.OPEN, Constants.HIGH, Constants.LOW, Constants.CLOSE, Constants.VOLUME])\n        self.addUIDbyReq(uid, req_id)\n        self._bar_type_by_req[req_id] = bar_type\n        if time_in_sec > Constants.SECONDS_IN_DAY:\n            total_days = int(math.ceil(time_in_sec/(Constants.SECONDS_IN_DAY)))\n            self._request_buffer.append(HistoryRequest(req_id, contract, \"\", f\"{total_days} D\", bar_type, keep_up_to_date))\n        else:\n            self._request_buffer.append(HistoryRequest(req_id, contract, \"\", f\"{(time_in_sec+300)} S\", bar_type, keep_up_to_date))\n        \n        self._hist_buffer_reqs.add(req_id)\n        self._update_requests.add(req_id)\n\n\n\n    def addUIDbyReq(self, uid, req_id):\n        if req_id in self._uid_by_req:\n            for _ in range(20):\n                print(\"*****\" * 30)\n                print(f\"CRASH BECAUSE {req_id} IS TAKEN\")\n                print(\"*****\" * 30)\n            sys.exit()\n        \n        self._uid_by_req[req_id] = uid\n\n\n\n    def getMinSecondsForBarType(self, bar_type): \n        if bar_type == Constants.DAY_BAR:\n            return 24*3600\n        elif bar_type == Constants.FOUR_HOUR_BAR:\n            return 4*3600\n        elif bar_type == Constants.HOUR_BAR:\n            return 3600\n        elif bar_type == Constants.FIFTEEN_MIN_BAR:\n            return 15*60\n        elif bar_type == Constants.FIVE_MIN_BAR:\n            return 5*60\n        elif bar_type == Constants.THREE_MIN_BAR:\n            return 3*60\n        elif bar_type == Constants.TWO_MIN_BAR:\n            return 2*60\n        elif bar_type == Constants.ONE_MIN_BAR:\n            return 1*60\n        else:\n            return Constants.MIN_SECONDS\n\n\n    def getWeekChunkSize(self, bar_type):\n        if bar_type == Constants.DAY_BAR:\n            return 52\n        elif bar_type == Constants.FOUR_HOUR_BAR:\n            return 25\n        elif bar_type == Constants.HOUR_BAR:\n            return 15\n        elif bar_type == Constants.FIFTEEN_MIN_BAR:\n            return 10\n        elif bar_type == Constants.FIVE_MIN_BAR or bar_type == Constants.THREE_MIN_BAR or bar_type == Constants.TWO_MIN_BAR or bar_type == Constants.ONE_MIN_BAR:\n            return 5\n        else:\n            return 52   \n\n######## HISTORICAL DATA REQUEST EXECUTION\n\n    def hasQueuedRequests(self):     \n        return len(self._request_buffer) > 0\n\n\n    @pyqtSlot(int)\n    def iterateHistoryRequests(self, delay=11_000):\n        # print(f\"HistoricalDataManager on thread: {int(QThread.currentThreadId())}\")\n        if self.hasQueuedRequests():\n            self.history_exec_timer = QTimer()\n            self.history_exec_timer.timeout.connect(self.executeHistoryRequest)\n            QTimer.singleShot(0, self.executeHistoryRequest)    #we want to do the first one without delay\n            self.history_exec_timer.start(delay)\n\n\n    @pyqtSlot()\n    def executeHistoryRequest(self):\n        print(f\"HistoricalDataManager.executeHistoryRequest on thread: {int(QThread.currentThreadId())}\")\n        if self.hasQueuedRequests():\n            # print(\"WHAT NOW?\")\n            if self.getActiveReqCount() < self.queue_cap:\n                hr = self.getNextHistoryRequest()\n                self._historicalDFs[hr.req_id] = pd.DataFrame(columns=[Constants.OPEN, Constants.HIGH, Constants.LOW, Constants.CLOSE, Constants.VOLUME])\n                request = dict()\n                request['type'] = 'reqHistoricalData'\n                request['req_id'] = hr.req_id\n                request['contract'] = hr.contract\n                request['end_date'] = hr.getEndDateString()\n                print(request['end_date'])\n                request['duration'] = hr.period_string\n                request['bar_type'] = hr.bar_type\n                request['regular_hours'] = self.regular_hours\n                request['keep_up_to_date'] = hr.keep_updating\n                self.makeRequest(request)\n                self.api_updater.emit(Constants.HISTORICAL_REQUEST_SUBMITTED, {'req_id': hr.req_id})\n        \n        if len(self._request_buffer) == 0:\n            self.history_exec_timer.stop()\n            self.history_exec_timer = None\n\n\n    def getNextHistoryRequest(self):\n        if self.most_recent_first:\n            mostRecent = max(self._request_buffer, key=attrgetter('end_date'))\n            self._request_buffer.remove(mostRecent)\n            return mostRecent\n        else:\n            return self._request_buffer.pop(0)\n\n\n####################\n\n    def getNextBufferReqID(self):\n        all_reserved_requests = self._hist_buffer_reqs | self._update_requests | self._is_updating | self._recently_cancelled_req_id\n        if len(all_reserved_requests) == 0:\n            return Constants.BASE_HIST_DATA_REQID\n        return max(all_reserved_requests) + 1\n\n\n    def getContractFor(self, contract_details):\n        contract = Contract()\n        contract.exchange = Constants.SMART\n        contract.secType = Constants.STOCK\n        contract.symbol = contract_details.symbol\n        contract.conId = contract_details.numeric_id\n        contract.primaryExchange = contract_details.exchange\n        return contract\n\n\n    def isUpdatingRequest(self, req_id):\n        return req_id in self._update_requests or req_id in self._is_updating\n\n\n    @pyqtSlot(list)\n    def fetchEarliestDates(self, stock_list, delay=50):\n\n        self.earliest_uid_by_req = dict()\n        self.earliest_date_by_uid = dict()\n\n        for index, (uid, contract_details) in enumerate(stock_list.items()):        \n            req_id = Constants.BASE_HIST_EARLIEST_REQID + index\n            self.earliest_uid_by_req[req_id] = uid\n\n            self.earliest_request_buffer[req_id] = contract_details\n        self.iterateEarliestDateReqs(delay)\n  \n\n    def iterateEarliestDateReqs(self, delay):\n        self.earliest_req_timer = QTimer()\n        self.earliest_req_timer.timeout.connect(self.executeEarliestDateReq)\n        self.earliest_req_timer.start(delay)\n\n\n    def executeEarliestDateReq(self):\n        if len(self.earliest_request_buffer) > 0:\n            (req_id, contract_details) = self.earliest_request_buffer.popitem()\n\n            contract = Contract()\n            contract.exchange = Constants.SMART\n            contract.secType = Constants.STOCK\n            contract.symbol = contract_details[Constants.SYMBOL]\n            contract.conId = self.earliest_uid_by_req[req_id]   ##TODO this is not ok\n            contract.primaryExchange = contract_details[Constants.EXCHANGE]\n                \n            request = dict()\n            request['type'] = 'reqHeadTimeStamp'\n            request['req_id'] = req_id\n            request['contract'] = contract\n            self.makeRequest(request)\n            \n        if len(self.earliest_request_buffer) == 0:\n            self.earliest_req_timer.stop()\n\n############### IB Interface callbacks\n\n    def headTimestamp(self, req_id: int, head_time_stamp: str):\n        super().headTimestamp(req_id, head_time_stamp)\n        if req_id in self._active_requests: self._active_requests.remove(req_id)\n        self.cancelHeadTimeStamp(req_id)\n        uid = self.earliest_uid_by_req[req_id]\n\n        date_time_obj = dateFromString(head_time_stamp, sep='-')\n        ny_timezone = timezone(Constants.NYC_TIMEZONE)\n        date_time_obj = ny_timezone.localize(date_time_obj)\n        self.earliest_date_by_uid[uid] = date_time_obj\n        \n        if req_id in self.earliest_uid_by_req:\n            del self.earliest_uid_by_req[req_id]\n            if len(self.earliest_uid_by_req) == 0:\n                self.api_updater.emit(Constants.DATES_RETRIEVED, dict())\n\n\n    def historicalData(self, req_id, bar):\n        super().historicalData(req_id, bar)\n        if self.isHistDataRequest(req_id):\n            self.processHistoricalBar(req_id, bar)\n            \n\n    def historicalDataUpdate(self, req_id, bar):\n        super().historicalDataUpdate(req_id, bar)\n        self.processHistoricalBar(req_id, bar)\n\n\n    def processHistoricalBar(self, req_id, bar):\n        if (req_id in self._historicalDFs) and (req_id in self._uid_by_req) and bar.volume != 0:\n            uid = self._uid_by_req[req_id]\n            instrument_time_zone = self._contract_details[uid].time_zone\n            bar_type = self._bar_type_by_req[req_id]\n            print(f\"{bar.date}: of the type {type(bar.date)}\")\n            # display_dt, utc_timestamp = pdDateFromIBString(bar.date, bar_type, instrument_time_zone)\n            new_row = {Constants.OPEN: bar.open, Constants.HIGH: bar.high, Constants.LOW: bar.low, Constants.CLOSE: bar.close, Constants.VOLUME: float(bar.volume)}\n\n            if \n\n            self._historicalDFs[req_id].loc[int(bar.date)] = new_row\n\n            if (req_id in self._is_updating) and self._initial_fetch_complete[req_id] and (req_id in self._last_update_time):\n                if (uid in self._priority_uids) or ((time.time() - self._last_update_time[req_id]) > self.update_delay):\n                    completed_req = self.getCompletedHistoryObject(req_id, None, None)\n                    self.data_buffers.processUpdates(completed_req, self._propagating_updates[req_id])\n                    self._last_update_time[req_id] = time.time()\n\n\n    def realtimeBar(self, reqId: int, time:int, open_: float, high: float, low: float, close: float, volume: float, wap: float, count: int):\n        super().realtimeBar(reqId, time, open_, high, low, close, volume, wap, count)\n        date_time = datetime.fromtimestamp(time)\n        print(\"RealTimeBar. TickerId:\", reqId, date_time, -1, open_, high, low, close, volume, wap, count)\n\n    \n    def error(self, req_id, errorCode, errorString, advancedOrderRejectJson=None):\n        super().error(req_id, errorCode, errorString, advancedOrderRejectJson=None)\n        if errorCode == 200 or errorCode == 162:\n            if self.isHistoryRequest(req_id):\n                self.historyError(req_id)\n\n\n    def historyError(self, req_id):\n        # print(f\"HistoricalDataManager.historyError {req_id}\")\n        if req_id in self._uid_by_req:\n            uid = self._uid_by_req[req_id]\n            \n            self.processGroupSignal(req_id)\n            if req_id in self._update_requests:\n                self._update_requests.remove(req_id)\n            \n            del self._uid_by_req[req_id]\n\n\n    def processGroupSignal(self, req_id, supress_signal=False):\n        for group_index in range(len(self._grouped_req_ids)):\n            if req_id in self._grouped_req_ids[group_index]['group_ids']:\n                self._grouped_req_ids[group_index]['group_ids'].remove(req_id)\n                if len(self._grouped_req_ids[group_index]['group_ids']) == 0:\n                    if not(supress_signal):\n                        group_type = self._grouped_req_ids[group_index]['group_type']\n                        self.api_updater.emit(Constants.HISTORICAL_GROUP_COMPLETE, {'type': group_type})\n                    del self._grouped_req_ids[group_index]\n                    return\n\n\n    def historicalDataEnd(self, req_id: int, start: str, end: str):\n        super().historicalDataEnd(req_id, start, end)\n        if req_id in self._active_requests: self._active_requests.remove(req_id)\n        self.signalHistoryDataComplete(req_id, start, end)\n\n\n    def signalHistoryDataComplete(self, req_id, start, end):\n        # print(f\"HistoricalDataManager.signalHistoryDataComplete\")\n        if req_id in self._hist_buffer_reqs:\n            self._hist_buffer_reqs.remove(req_id)\n            completed_req = self.getCompletedHistoryObject(req_id, start, end)\n\n            if self.isUpdatingRequest(req_id):\n                self.data_buffers.processUpdates(completed_req, self._propagating_updates[req_id])\n            else:\n                self.data_buffers.processData(completed_req)\n\n            self.api_updater.emit(Constants.HISTORICAL_REQUEST_COMPLETED, completed_req)\n            uid = completed_req['key']\n            \n            self.processGroupSignal(req_id)\n            if req_id in self._update_requests:\n                print(self._update_requests)\n                self._update_requests.remove(req_id)\n                if req_id in self._is_updating:\n                    self._last_update_time[req_id] = time.time()\n                    self._initial_fetch_complete[req_id] = True\n                if len(self._update_requests) == 0:\n                    self.api_updater.emit(Constants.HISTORICAL_UPDATE_COMPLETE, {'completed_uid': uid})\n\n            if not (req_id in self._is_updating):\n                del self._uid_by_req[req_id]\n                del self._bar_type_by_req[req_id]\n\n\n    def getCompletedHistoryObject(self, req_id, start, end):\n        completed_req = dict()\n        uid = self._uid_by_req[req_id]\n        completed_req['key'] = self._uid_by_req[req_id]\n        completed_req['data'] = self._historicalDFs.pop(req_id)\n        if (req_id in self._is_updating): self._historicalDFs[req_id] = pd.DataFrame(columns=[Constants.OPEN, Constants.HIGH, Constants.LOW, Constants.CLOSE, Constants.VOLUME])\n        completed_req['req_id'] = req_id\n        \n        if (start is not None) and (end is not None):\n            start_date = dateFromIBString(start)\n            end_date = dateFromIBString(end)\n            completed_req['range'] = (start_date, end_date)\n        else:\n            completed_req['range'] = None\n        completed_req['bar type'] = self._bar_type_by_req[req_id]\n\n        return completed_req\n\n\nclass HistoryRequest():\n\n    def __init__(self, req_id, contract, end_date, period_string, bar_type, keep_updating=False):\n        self.req_id = req_id\n        self.contract = contract\n        self.end_date = end_date\n        self.period_string = period_string\n        self.bar_type = bar_type\n        self.keep_updating = keep_updating\n\n    def getEndDateString(self):\n        if self.end_date == \"\":\n            return \"\"\n        else:\n            datetime_string = dateToString(self.end_date)\n            return datetime_string + \" US/Eastern\" \n\n",
			"file": "dataHandling/HistoryManagement/HistoricalDataManagement.py",
			"file_size": 26469,
			"file_write_time": 133587947278877574,
			"settings":
			{
				"buffer_size": 26486,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"CAAAAFROAAAAAAAAVU4AAAAAAAAAAAAAVU4AAAAAAABZTgAAAAAAAAAAAABZTgAAAAAAAF1OAAAAAAAAAAAAAF1OAAAAAAAAXk4AAAAAAAAAAAAAXk4AAAAAAABfTgAAAAAAAAAAAABfTgAAAAAAAGBOAAAAAAAAAAAAAGBOAAAAAAAAYU4AAAAAAAAAAAAAYU4AAAAAAABiTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVE4AAAAAAABUTgAAAAAAAP///////+9/"
				],
				[
					6,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGJOAAAAAAAAZE4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYk4AAAAAAABiTgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "bar"
					},
					"AwAAAGNOAAAAAAAAZE4AAAAAAAAAAAAAZE4AAAAAAABlTgAAAAAAAAAAAABlTgAAAAAAAGZOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY04AAAAAAABjTgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ".date"
					},
					"BQAAAGZOAAAAAAAAZ04AAAAAAAAAAAAAZ04AAAAAAABoTgAAAAAAAAAAAABoTgAAAAAAAGlOAAAAAAAAAAAAAGlOAAAAAAAAak4AAAAAAAAAAAAAak4AAAAAAABrTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZk4AAAAAAABmTgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAGxOAAAAAAAAbU4AAAAAAAAAAAAAbU4AAAAAAAB1TgAAAAAAAAAAAAB1TgAAAAAAAHZOAAAAAAAAAAAAAHZOAAAAAAAAd04AAAAAAAAAAAAAd04AAAAAAAB4TgAAAAAAAAAAAAB4TgAAAAAAAHlOAAAAAAAAAAAAAHlOAAAAAAAAek4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbE4AAAAAAABsTgAAAAAAAP///////+9/"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHpOAAAAAAAAfE4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAek4AAAAAAAB6TgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "bar"
					},
					"AwAAAHtOAAAAAAAAfE4AAAAAAAAAAAAAfE4AAAAAAAB9TgAAAAAAAAAAAAB9TgAAAAAAAH5OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe04AAAAAAAB7TgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "tp"
					},
					"AgAAAHtOAAAAAAAAfE4AAAAAAAAAAAAAfE4AAAAAAAB9TgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe04AAAAAAAB7TgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAHxOAAAAAAAAfE4AAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAfU4AAAAAAAB9TgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "ype("
					},
					"BAAAAHxOAAAAAAAAfU4AAAAAAAAAAAAAfU4AAAAAAAB+TgAAAAAAAAAAAAB+TgAAAAAAAH9OAAAAAAAAAAAAAH9OAAAAAAAAgE4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfE4AAAAAAAB8TgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIROAAAAAAAAhU4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhE4AAAAAAACETgAAAAAAAP///////+9/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAIVOAAAAAAAAhk4AAAAAAAAAAAAAhk4AAAAAAACOTgAAAAAAAAAAAACOTgAAAAAAAI9OAAAAAAAAAAAAAI9OAAAAAAAAkE4AAAAAAAAAAAAAkE4AAAAAAACRTgAAAAAAAAAAAACRTgAAAAAAAJJOAAAAAAAAAAAAAJJOAAAAAAAAk04AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhU4AAAAAAACFTgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJNOAAAAAAAAlU4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk04AAAAAAACTTgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "bar"
					},
					"AwAAAJROAAAAAAAAlU4AAAAAAAAAAAAAlU4AAAAAAACWTgAAAAAAAAAAAACWTgAAAAAAAJdOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlE4AAAAAAACUTgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"cut",
					null,
					"AQAAAHcqAAAAAAAAdyoAAAAAAAAOAAAAbnVtZXJpY19pZD11aWQ",
					"AQAAAAAAAAABAAAAhSoAAAAAAAB3KgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"paste",
					null,
					"AQAAADMqAAAAAAAAQSoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMyoAAAAAAAAzKgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEEqAAAAAAAAQioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQSoAAAAAAABBKgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIqAAAAAAAAQyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQioAAAAAAABCKgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAAEMqAAAAAAAAQyoAAAAAAAAHAAAAc3ltYm9sPQ",
					"AQAAAAAAAAABAAAAQyoAAAAAAABKKgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "**"
					},
					"AgAAAEMqAAAAAAAARCoAAAAAAAAAAAAARCoAAAAAAABFKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQyoAAAAAAABDKgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAE4qAAAAAAAATioAAAAAAAA0AAAAW0NvbnN0YW50cy5TWU1CT0xdLCBleGNoYW5nZT1zdG9ja19pbmZbJ2V4Y2hhbmdlJ10sIA",
					"AQAAAAAAAAABAAAATioAAAAAAACCKgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"left_delete",
					null,
					"AQAAAB5OAAAAAAAAHk4AAAAAAABEAAAAICAgICAgICBwcmludChiYXIuZGF0ZSkKICAgICAgICBwcmludCh0eXBlKGJhcikpCiAgICAgICAgcHJpbnQoYmFyKQo",
					"AQAAAAAAAAABAAAAHk4AAAAAAABiTgAAAAAAAAAAAAAAAAAA"
				],
				[
					107,
					1,
					"paste",
					null,
					"AgAAALAqAAAAAAAAuSoAAAAAAAAAAAAAuSoAAAAAAAC5KgAAAAAAAA8AAABzdG9ja19saXN0W3VpZF0",
					"AQAAAAAAAAABAAAAvyoAAAAAAACwKgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADovAAAAAAAAOy8AAAAAAAAAAAAAOy8AAAAAAABDLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOi8AAAAAAAA6LwAAAAAAAP///////+9/"
				],
				[
					119,
					1,
					"paste",
					null,
					"AQAAAEMvAAAAAAAAZC8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQy8AAAAAAABDLwAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "self.contrct"
					},
					"DQAAAEMvAAAAAAAARC8AAAAAAAAAAAAARC8AAAAAAABELwAAAAAAACEAAAB1aWQgPSBjb250cmFjdF9kZXRhaWxzLm51bWVyaWNfaWRELwAAAAAAAEUvAAAAAAAAAAAAAEUvAAAAAAAARi8AAAAAAAAAAAAARi8AAAAAAABHLwAAAAAAAAAAAABHLwAAAAAAAEgvAAAAAAAAAAAAAEgvAAAAAAAASS8AAAAAAAAAAAAASS8AAAAAAABKLwAAAAAAAAAAAABKLwAAAAAAAEsvAAAAAAAAAAAAAEsvAAAAAAAATC8AAAAAAAAAAAAATC8AAAAAAABNLwAAAAAAAAAAAABNLwAAAAAAAE4vAAAAAAAAAAAAAE4vAAAAAAAATy8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQy8AAAAAAABkLwAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					2,
					"left_delete",
					null,
					"AgAAAE4vAAAAAAAATi8AAAAAAAABAAAAdE0vAAAAAAAATS8AAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAATy8AAAAAAABPLwAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "act_details"
					},
					"CwAAAE0vAAAAAAAATi8AAAAAAAAAAAAATi8AAAAAAABPLwAAAAAAAAAAAABPLwAAAAAAAFAvAAAAAAAAAAAAAFAvAAAAAAAAUS8AAAAAAAAAAAAAUS8AAAAAAABSLwAAAAAAAAAAAABSLwAAAAAAAFMvAAAAAAAAAAAAAFMvAAAAAAAAVC8AAAAAAAAAAAAAVC8AAAAAAABVLwAAAAAAAAAAAABVLwAAAAAAAFYvAAAAAAAAAAAAAFYvAAAAAAAAVy8AAAAAAAAAAAAAVy8AAAAAAABYLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATS8AAAAAAABNLwAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAFgvAAAAAAAAWi8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWC8AAAAAAABYLwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAFkvAAAAAAAAWi8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWS8AAAAAAABZLwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"left_delete",
					null,
					"AQAAAFkvAAAAAAAAWS8AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAWi8AAAAAAABaLwAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "uid"
					},
					"AwAAAFkvAAAAAAAAWi8AAAAAAAAAAAAAWi8AAAAAAABbLwAAAAAAAAAAAABbLwAAAAAAAFwvAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWS8AAAAAAABZLwAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwvAAAAAAAAXS8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXC8AAAAAAABcLwAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAAFwvAAAAAAAAXC8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAXS8AAAAAAABdLwAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAF0vAAAAAAAAXi8AAAAAAAAAAAAAXi8AAAAAAABfLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXS8AAAAAAABdLwAAAAAAAP///////+9/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " con"
					},
					"BAAAAF8vAAAAAAAAYC8AAAAAAAAAAAAAYC8AAAAAAABhLwAAAAAAAAAAAABhLwAAAAAAAGIvAAAAAAAAAAAAAGIvAAAAAAAAYy8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXy8AAAAAAABfLwAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert_completion",
					{
						"completion": "contract_details",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "contract_details"
					},
					"AgAAAGAvAAAAAAAAYC8AAAAAAAADAAAAY29uYC8AAAAAAABwLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYy8AAAAAAABjLwAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAEgvAAAAAAAASS8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASC8AAAAAAABILwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACUIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAqCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAP///////+9/"
				],
				[
					151,
					1,
					"paste",
					null,
					"AQAAACoIAAAAAAAAOwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKggAAAAAAAAqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADsIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA9CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwgAAAAAAAA7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD0IAAAAAAAAPggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQgAAAAAAAA9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "dict"
					},
					"BAAAAD4IAAAAAAAAPwgAAAAAAAAAAAAAPwgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEEIAAAAAAAAAAAAAEEIAAAAAAAAQggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPggAAAAAAAA+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEIIAAAAAAAARAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQggAAAAAAABCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFZQAAAAAAAAV1AAAAAAAAAAAAAAV1AAAAAAAABjUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVlAAAAAAAABWUAAAAAAAAP///////+9/"
				],
				[
					165,
					1,
					"paste",
					null,
					"AQAAAGNQAAAAAAAAdFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY1AAAAAAAABjUAAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "sl"
					},
					"AgAAAGNQAAAAAAAAZFAAAAAAAAAAAAAAZFAAAAAAAABlUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY1AAAAAAAABjUAAAAAAAAAAAAAAAAFhA"
				],
				[
					168,
					1,
					"left_delete",
					null,
					"AQAAAGRQAAAAAAAAZFAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAZVAAAAAAAABlUAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "elf."
					},
					"BAAAAGRQAAAAAAAAZVAAAAAAAAAAAAAAZVAAAAAAAABmUAAAAAAAAAAAAABmUAAAAAAAAGdQAAAAAAAAAAAAAGdQAAAAAAAAaFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZFAAAAAAAABkUAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHlQAAAAAAAAe1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeVAAAAAAAAB5UAAAAAAAAP///////+9/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "ud"
					},
					"AgAAAHpQAAAAAAAAe1AAAAAAAAAAAAAAe1AAAAAAAAB8UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAelAAAAAAAAB6UAAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"left_delete",
					null,
					"AQAAAHtQAAAAAAAAe1AAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAfFAAAAAAAAB8UAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAAHtQAAAAAAAAfFAAAAAAAAAAAAAAfFAAAAAAAAB9UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe1AAAAAAAAB7UAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "contrract"
					},
					"CQAAAGNQAAAAAAAAZFAAAAAAAAAAAAAAZFAAAAAAAABlUAAAAAAAAAAAAABlUAAAAAAAAGZQAAAAAAAAAAAAAGZQAAAAAAAAZ1AAAAAAAAAAAAAAZ1AAAAAAAABoUAAAAAAAAAAAAABoUAAAAAAAAGlQAAAAAAAAAAAAAGlQAAAAAAAAalAAAAAAAAAAAAAAalAAAAAAAABrUAAAAAAAAAAAAABrUAAAAAAAAGxQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY1AAAAAAAABjUAAAAAAAAAAAAAAAAFhA"
				],
				[
					179,
					4,
					"left_delete",
					null,
					"BAAAAGtQAAAAAAAAa1AAAAAAAAABAAAAdGpQAAAAAAAAalAAAAAAAAABAAAAY2lQAAAAAAAAaVAAAAAAAAABAAAAYWhQAAAAAAAAaFAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAbFAAAAAAAABsUAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "act_details"
					},
					"CwAAAGhQAAAAAAAAaVAAAAAAAAAAAAAAaVAAAAAAAABqUAAAAAAAAAAAAABqUAAAAAAAAGtQAAAAAAAAAAAAAGtQAAAAAAAAbFAAAAAAAAAAAAAAbFAAAAAAAABtUAAAAAAAAAAAAABtUAAAAAAAAG5QAAAAAAAAAAAAAG5QAAAAAAAAb1AAAAAAAAAAAAAAb1AAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAHFQAAAAAAAAAAAAAHFQAAAAAAAAclAAAAAAAAAAAAAAclAAAAAAAABzUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaFAAAAAAAABoUAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHNQAAAAAAAAdFAAAAAAAAAAAAAAdFAAAAAAAAB1UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc1AAAAAAAABzUAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHVQAAAAAAAAdlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdVAAAAAAAAB1UAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAL5RAAAAAAAAv1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvlEAAAAAAAC+UQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL9RAAAAAAAAwFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAv1EAAAAAAAC/UQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": ".time_zone"
					},
					"CgAAAJFQAAAAAAAAklAAAAAAAAAAAAAAklAAAAAAAACTUAAAAAAAAAAAAACTUAAAAAAAAJRQAAAAAAAAAAAAAJRQAAAAAAAAlVAAAAAAAAAAAAAAlVAAAAAAAACWUAAAAAAAAAAAAACWUAAAAAAAAJdQAAAAAAAAAAAAAJdQAAAAAAAAmFAAAAAAAAAAAAAAmFAAAAAAAACZUAAAAAAAAAAAAACZUAAAAAAAAJpQAAAAAAAAAAAAAJpQAAAAAAAAm1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkVAAAAAAAACRUAAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "intr"
					},
					"BQAAAGNQAAAAAAAAZFAAAAAAAAAAAAAAZFAAAAAAAABkUAAAAAAAABAAAABjb250cmFjdF9kZXRhaWxzZFAAAAAAAABlUAAAAAAAAAAAAABlUAAAAAAAAGZQAAAAAAAAAAAAAGZQAAAAAAAAZ1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY1AAAAAAAABzUAAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					2,
					"left_delete",
					null,
					"AgAAAGZQAAAAAAAAZlAAAAAAAAABAAAAcmVQAAAAAAAAZVAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAZ1AAAAAAAABnUAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "strument_s"
					},
					"CgAAAGVQAAAAAAAAZlAAAAAAAAAAAAAAZlAAAAAAAABnUAAAAAAAAAAAAABnUAAAAAAAAGhQAAAAAAAAAAAAAGhQAAAAAAAAaVAAAAAAAAAAAAAAaVAAAAAAAABqUAAAAAAAAAAAAABqUAAAAAAAAGtQAAAAAAAAAAAAAGtQAAAAAAAAbFAAAAAAAAAAAAAAbFAAAAAAAABtUAAAAAAAAAAAAABtUAAAAAAAAG5QAAAAAAAAAAAAAG5QAAAAAAAAb1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZVAAAAAAAABlUAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"left_delete",
					null,
					"AQAAAG5QAAAAAAAAblAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAb1AAAAAAAABvUAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "time_so"
					},
					"BwAAAG5QAAAAAAAAb1AAAAAAAAAAAAAAb1AAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAHFQAAAAAAAAAAAAAHFQAAAAAAAAclAAAAAAAAAAAAAAclAAAAAAAABzUAAAAAAAAAAAAABzUAAAAAAAAHRQAAAAAAAAAAAAAHRQAAAAAAAAdVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAblAAAAAAAABuUAAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					2,
					"left_delete",
					null,
					"AgAAAHRQAAAAAAAAdFAAAAAAAAABAAAAb3NQAAAAAAAAc1AAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAdVAAAAAAAAB1UAAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "zone"
					},
					"BAAAAHNQAAAAAAAAdFAAAAAAAAAAAAAAdFAAAAAAAAB1UAAAAAAAAAAAAAB1UAAAAAAAAHZQAAAAAAAAAAAAAHZQAAAAAAAAd1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc1AAAAAAAABzUAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"paste",
					null,
					"AQAAAM5RAAAAAAAA4lEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzlEAAAAAAADOUQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"cut",
					null,
					"AQAAAKdRAAAAAAAAp1EAAAAAAAA8AAAAcGREYXRlRnJvbUlCU3RyaW5nKGJhci5kYXRlLCBiYXJfdHlwZSwgaW5zdHJ1bWVudF90aW1lX3pvbmUp",
					"AQAAAAAAAAABAAAAp1EAAAAAAADjUQAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHpRAAAAAAAAe1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAelEAAAAAAAB6UQAAAAAAAAAAAAAAAHZA"
				],
				[
					221,
					1,
					"reindent",
					null,
					"AQAAAHtRAAAAAAAAh1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe1EAAAAAAAB7UQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAIdRAAAAAAAAw1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh1EAAAAAAACHUQAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "utc"
					},
					"AwAAAIdRAAAAAAAAiFEAAAAAAAAAAAAAiFEAAAAAAACJUQAAAAAAAAAAAACJUQAAAAAAAIpRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh1EAAAAAAACHUQAAAAAAAAAAAAAAAFhA"
				],
				[
					225,
					3,
					"left_delete",
					null,
					"AwAAAIlRAAAAAAAAiVEAAAAAAAABAAAAY4hRAAAAAAAAiFEAAAAAAAABAAAAdIdRAAAAAAAAh1EAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAilEAAAAAAACKUQAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "localized_"
					},
					"CgAAAIdRAAAAAAAAiFEAAAAAAAAAAAAAiFEAAAAAAACJUQAAAAAAAAAAAACJUQAAAAAAAIpRAAAAAAAAAAAAAIpRAAAAAAAAi1EAAAAAAAAAAAAAi1EAAAAAAACMUQAAAAAAAAAAAACMUQAAAAAAAI1RAAAAAAAAAAAAAI1RAAAAAAAAjlEAAAAAAAAAAAAAjlEAAAAAAACPUQAAAAAAAAAAAACPUQAAAAAAAJBRAAAAAAAAAAAAAJBRAAAAAAAAkVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh1EAAAAAAACHUQAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "dt,"
					},
					"AwAAAJFRAAAAAAAAklEAAAAAAAAAAAAAklEAAAAAAACTUQAAAAAAAAAAAACTUQAAAAAAAJRRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkVEAAAAAAACRUQAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": " utc_"
					},
					"BQAAAJRRAAAAAAAAlVEAAAAAAAAAAAAAlVEAAAAAAACWUQAAAAAAAAAAAACWUQAAAAAAAJdRAAAAAAAAAAAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACZUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlFEAAAAAAACUUQAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "timestamp"
					},
					"CQAAAJlRAAAAAAAAmlEAAAAAAAAAAAAAmlEAAAAAAACbUQAAAAAAAAAAAACbUQAAAAAAAJxRAAAAAAAAAAAAAJxRAAAAAAAAnVEAAAAAAAAAAAAAnVEAAAAAAACeUQAAAAAAAAAAAACeUQAAAAAAAJ9RAAAAAAAAAAAAAJ9RAAAAAAAAoFEAAAAAAAAAAAAAoFEAAAAAAAChUQAAAAAAAAAAAAChUQAAAAAAAKJRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmVEAAAAAAACZUQAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKJRAAAAAAAAo1EAAAAAAAAAAAAAo1EAAAAAAACkUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAolEAAAAAAACiUQAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKRRAAAAAAAApVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApFEAAAAAAACkUQAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"paste",
					null,
					"AQAAAA5SAAAAAAAAG1IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADlIAAAAAAAAOUgAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHhRAAAAAAAAeVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeFEAAAAAAAB4UQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " Constants."
					},
					"CwAAAHlRAAAAAAAAelEAAAAAAAAAAAAAelEAAAAAAAB7UQAAAAAAAAAAAAB7UQAAAAAAAHxRAAAAAAAAAAAAAHxRAAAAAAAAfVEAAAAAAAAAAAAAfVEAAAAAAAB+UQAAAAAAAAAAAAB+UQAAAAAAAH9RAAAAAAAAAAAAAH9RAAAAAAAAgFEAAAAAAAAAAAAAgFEAAAAAAACBUQAAAAAAAAAAAACBUQAAAAAAAIJRAAAAAAAAAAAAAIJRAAAAAAAAg1EAAAAAAAAAAAAAg1EAAAAAAACEUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeVEAAAAAAAB5UQAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "LOCAL"
					},
					"BQAAAIRRAAAAAAAAhVEAAAAAAAAAAAAAhVEAAAAAAACGUQAAAAAAAAAAAACGUQAAAAAAAIdRAAAAAAAAAAAAAIdRAAAAAAAAiFEAAAAAAAAAAAAAiFEAAAAAAACJUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhFEAAAAAAACEUQAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					5,
					"left_delete",
					null,
					"BQAAAIhRAAAAAAAAiFEAAAAAAAABAAAATIdRAAAAAAAAh1EAAAAAAAABAAAAQYZRAAAAAAAAhlEAAAAAAAABAAAAQ4VRAAAAAAAAhVEAAAAAAAABAAAAT4RRAAAAAAAAhFEAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAiVEAAAAAAACJUQAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "DISPLAY_TIMME"
					},
					"DQAAAIRRAAAAAAAAhVEAAAAAAAAAAAAAhVEAAAAAAACGUQAAAAAAAAAAAACGUQAAAAAAAIdRAAAAAAAAAAAAAIdRAAAAAAAAiFEAAAAAAAAAAAAAiFEAAAAAAACJUQAAAAAAAAAAAACJUQAAAAAAAIpRAAAAAAAAAAAAAIpRAAAAAAAAi1EAAAAAAAAAAAAAi1EAAAAAAACMUQAAAAAAAAAAAACMUQAAAAAAAI1RAAAAAAAAAAAAAI1RAAAAAAAAjlEAAAAAAAAAAAAAjlEAAAAAAACPUQAAAAAAAAAAAACPUQAAAAAAAJBRAAAAAAAAAAAAAJBRAAAAAAAAkVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhFEAAAAAAACEUQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					2,
					"left_delete",
					null,
					"AgAAAJBRAAAAAAAAkFEAAAAAAAABAAAARY9RAAAAAAAAj1EAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAkVEAAAAAAACRUQAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "INSTRUME"
					},
					"CQAAAIRRAAAAAAAAhVEAAAAAAAAAAAAAhVEAAAAAAACFUQAAAAAAAAsAAABESVNQTEFZX1RJTYVRAAAAAAAAhlEAAAAAAAAAAAAAhlEAAAAAAACHUQAAAAAAAAAAAACHUQAAAAAAAIhRAAAAAAAAAAAAAIhRAAAAAAAAiVEAAAAAAAAAAAAAiVEAAAAAAACKUQAAAAAAAAAAAACKUQAAAAAAAItRAAAAAAAAAAAAAItRAAAAAAAAjFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj1EAAAAAAACEUQAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": "NT_I"
					},
					"BAAAAIxRAAAAAAAAjVEAAAAAAAAAAAAAjVEAAAAAAACOUQAAAAAAAAAAAACOUQAAAAAAAI9RAAAAAAAAAAAAAI9RAAAAAAAAkFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjFEAAAAAAACMUQAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"left_delete",
					null,
					"AQAAAI9RAAAAAAAAj1EAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAkFEAAAAAAACQUQAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAI9RAAAAAAAAkFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj1EAAAAAAACPUQAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "LOCAL"
					},
					"BgAAAIRRAAAAAAAAhVEAAAAAAAAAAAAAhVEAAAAAAACFUQAAAAAAAAwAAABJTlNUUlVNRU5UX1SFUQAAAAAAAIZRAAAAAAAAAAAAAIZRAAAAAAAAh1EAAAAAAAAAAAAAh1EAAAAAAACIUQAAAAAAAAAAAACIUQAAAAAAAIlRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkFEAAAAAAACEUQAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					5,
					"left_delete",
					null,
					"BQAAAIhRAAAAAAAAiFEAAAAAAAABAAAATIdRAAAAAAAAh1EAAAAAAAABAAAAQYZRAAAAAAAAhlEAAAAAAAABAAAAQ4VRAAAAAAAAhVEAAAAAAAABAAAAT4RRAAAAAAAAhFEAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAiVEAAAAAAACJUQAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "DISPLAY_TIME"
					},
					"DAAAAIRRAAAAAAAAhVEAAAAAAAAAAAAAhVEAAAAAAACGUQAAAAAAAAAAAACGUQAAAAAAAIdRAAAAAAAAAAAAAIdRAAAAAAAAiFEAAAAAAAAAAAAAiFEAAAAAAACJUQAAAAAAAAAAAACJUQAAAAAAAIpRAAAAAAAAAAAAAIpRAAAAAAAAi1EAAAAAAAAAAAAAi1EAAAAAAACMUQAAAAAAAAAAAACMUQAAAAAAAI1RAAAAAAAAAAAAAI1RAAAAAAAAjlEAAAAAAAAAAAAAjlEAAAAAAACPUQAAAAAAAAAAAACPUQAAAAAAAJBRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhFEAAAAAAACEUQAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJBRAAAAAAAAkVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkFEAAAAAAACQUQAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJFRAAAAAAAAklEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkVEAAAAAAACRUQAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"cut",
					null,
					"AQAAAKFRAAAAAAAAoVEAAAAAAABaAAAAbG9jYWxpemVkX2R0LCB1dGNfdGltZXN0YW1wID0gcGREYXRlRnJvbUlCU3RyaW5nKGJhci5kYXRlLCBiYXJfdHlwZSwgaW5zdHJ1bWVudF90aW1lX3pvbmUp",
					"AQAAAAAAAAABAAAAoVEAAAAAAAD7UQAAAAAAAP///////+9/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANVQAAAAAAAA1lAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1VAAAAAAAADVUAAAAAAAAAAAAAAAAFhA"
				],
				[
					295,
					1,
					"paste",
					null,
					"AQAAANZQAAAAAAAAMFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1lAAAAAAAADWUAAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAANZQAAAAAAAA2lAAAAAAAAAAAAAA2lAAAAAAAADeUAAAAAAAAAAAAADeUAAAAAAAAOJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1lAAAAAAAADWUAAAAAAAAAAAAAAAAAAA"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "dis"
					},
					"BAAAAOJQAAAAAAAA41AAAAAAAAAAAAAA41AAAAAAAADjUAAAAAAAAAwAAABsb2NhbGl6ZWRfZHTjUAAAAAAAAORQAAAAAAAAAAAAAORQAAAAAAAA5VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4lAAAAAAAADuUAAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "play_dt"
					},
					"BwAAAOVQAAAAAAAA5lAAAAAAAAAAAAAA5lAAAAAAAADnUAAAAAAAAAAAAADnUAAAAAAAAOhQAAAAAAAAAAAAAOhQAAAAAAAA6VAAAAAAAAAAAAAA6VAAAAAAAADqUAAAAAAAAAAAAADqUAAAAAAAAOtQAAAAAAAAAAAAAOtQAAAAAAAA7FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5VAAAAAAAADlUAAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"paste",
					null,
					"AQAAAPdRAAAAAAAAAVIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA91EAAAAAAAD3UQAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					4,
					"left_delete",
					null,
					"BAAAAAxSAAAAAAAADFIAAAAAAAAEAAAAICAgIAhSAAAAAAAACFIAAAAAAAAEAAAAICAgIARSAAAAAAAABFIAAAAAAAAEAAAAICAgIANSAAAAAAAAA1IAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAEFIAAAAAAAAQUgAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"paste",
					null,
					"AQAAAIYcAAAAAAAAlhwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhwAAAAAAACGHAAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJYcAAAAAAAAlxwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhwAAAAAAACWHAAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJccAAAAAAAAmBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxwAAAAAAACXHAAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAAJgdAAAAAAAAmR0AAAAAAAAAAAAAmR0AAAAAAACaHQAAAAAAAAAAAACaHQAAAAAAAJsdAAAAAAAAAAAAAJsdAAAAAAAAnB0AAAAAAAAAAAAAnB0AAAAAAACdHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmB0AAAAAAACYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEMdAAAAAAAARB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": " con"
					},
					"BAAAAEQdAAAAAAAARR0AAAAAAAAAAAAARR0AAAAAAABGHQAAAAAAAAAAAABGHQAAAAAAAEcdAAAAAAAAAAAAAEcdAAAAAAAASB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert_completion",
					{
						"completion": "contract_details",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "contract_details"
					},
					"AgAAAEUdAAAAAAAARR0AAAAAAAADAAAAY29uRR0AAAAAAABVHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASB0AAAAAAABIHQAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					3,
					"left_delete",
					null,
					"AwAAAJgcAAAAAAAAmBwAAAAAAAAIAAAAY29udHJhY3SXHAAAAAAAAJccAAAAAAAAAQAAACCWHAAAAAAAAJYcAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAmBwAAAAAAACgHAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"cut",
					null,
					"AQAAACgcAAAAAAAAKBwAAAAAAAAwAAAAY29udHJhY3QgPSBzZWxmLmdldENvbnRyYWN0Rm9yKGNvbnRyYWN0X2RldGFpbHMp",
					"AQAAAAAAAAABAAAAWBwAAAAAAAAoHAAAAAAAAAAAAAAAAFBA"
				],
				[
					360,
					1,
					"left_delete",
					null,
					"AQAAAHAdAAAAAAAAcB0AAAAAAAAFAAAAc2VsZi4",
					"AQAAAAAAAAABAAAAdR0AAAAAAABwHQAAAAAAAAAAAAAAAFBA"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHAdAAAAAAAAcR0AAAAAAAAAAAAAcR0AAAAAAAB5HQAAAAAAAAAAAAB5HQAAAAAAAHodAAAAAAAAAAAAAHodAAAAAAAAgh0AAAAAAAAAAAAAcR0AAAAAAABxHQAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAcB0AAAAAAABwHQAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"reindent",
					null,
					"AQAAAHEdAAAAAAAAeR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcR0AAAAAAABxHQAAAAAAAAAAAAAAAFBA"
				],
				[
					364,
					1,
					"paste",
					null,
					"AQAAAHkdAAAAAAAAqR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeR0AAAAAAAB5HQAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"paste",
					null,
					"AgAAAJgdAAAAAAAAqB0AAAAAAAAAAAAAqB0AAAAAAACoHQAAAAAAABAAAABjb250cmFjdF9kZXRhaWxz",
					"AQAAAAAAAAABAAAAqB0AAAAAAACYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKkdAAAAAAAAqh0AAAAAAAAAAAAAqh0AAAAAAACyHQAAAAAAAAAAAACzHQAAAAAAALMdAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAqR0AAAAAAACpHQAAAAAAAP///////+9/"
				],
				[
					372,
					1,
					"paste",
					null,
					"AQAAALIdAAAAAAAAwh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsh0AAAAAAACyHQAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "self._"
					},
					"BgAAALIdAAAAAAAAsx0AAAAAAAAAAAAAsx0AAAAAAAC0HQAAAAAAAAAAAAC0HQAAAAAAALUdAAAAAAAAAAAAALUdAAAAAAAAth0AAAAAAAAAAAAAth0AAAAAAAC3HQAAAAAAAAAAAAC3HQAAAAAAALgdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsh0AAAAAAACyHQAAAAAAAAAAAAAAAFBA"
				],
				[
					376,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAMgdAAAAAAAAyh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyB0AAAAAAADIHQAAAAAAAP///////+9/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": "uid"
					},
					"AwAAAMkdAAAAAAAAyh0AAAAAAAAAAAAAyh0AAAAAAADLHQAAAAAAAAAAAADLHQAAAAAAAMwdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyR0AAAAAAADJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"paste",
					null,
					"AgAAAMkdAAAAAAAA2h0AAAAAAAAAAAAA2h0AAAAAAADaHQAAAAAAAAMAAAB1aWQ",
					"AQAAAAAAAAABAAAAzB0AAAAAAADJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": ".m"
					},
					"AgAAANodAAAAAAAA2x0AAAAAAAAAAAAA2x0AAAAAAADcHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"left_delete",
					null,
					"AQAAAMkdAAAAAAAAyR0AAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAyh0AAAAAAADKHQAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"left_delete",
					null,
					"AQAAANodAAAAAAAA2h0AAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA2x0AAAAAAADbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "numer"
					},
					"BQAAANodAAAAAAAA2x0AAAAAAAAAAAAA2x0AAAAAAADcHQAAAAAAAAAAAADcHQAAAAAAAN0dAAAAAAAAAAAAAN0dAAAAAAAA3h0AAAAAAAAAAAAA3h0AAAAAAADfHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					397,
					1,
					"insert_completion",
					{
						"completion": "numeric_id",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "numeric_id"
					},
					"AgAAANodAAAAAAAA2h0AAAAAAAAFAAAAbnVtZXLaHQAAAAAAAOQdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3x0AAAAAAADfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAOUdAAAAAAAA5h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5R0AAAAAAADlHQAAAAAAAP///////+9/"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYdAAAAAAAA5x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5h0AAAAAAADmHQAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUdAAAAAAAA5h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5R0AAAAAAADlHQAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": "contrac"
					},
					"BwAAAOgdAAAAAAAA6R0AAAAAAAAAAAAA6R0AAAAAAADqHQAAAAAAAAAAAADqHQAAAAAAAOsdAAAAAAAAAAAAAOsdAAAAAAAA7B0AAAAAAAAAAAAA7B0AAAAAAADtHQAAAAAAAAAAAADtHQAAAAAAAO4dAAAAAAAAAAAAAO4dAAAAAAAA7x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6B0AAAAAAADoHQAAAAAAAP///////+9/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "t_d"
					},
					"AwAAAO8dAAAAAAAA8B0AAAAAAAAAAAAA8B0AAAAAAADxHQAAAAAAAAAAAADxHQAAAAAAAPIdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7x0AAAAAAADvHQAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert_completion",
					{
						"completion": "contract_details",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "contract_details"
					},
					"AgAAAOgdAAAAAAAA6B0AAAAAAAAKAAAAY29udHJhY3RfZOgdAAAAAAAA+B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8h0AAAAAAADyHQAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					3,
					"left_delete",
					null,
					"AwAAAB0dAAAAAAAAHR0AAAAAAAAIAAAAY29udHJhY3QcHQAAAAAAABwdAAAAAAAAAQAAACAbHQAAAAAAABsdAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAHR0AAAAAAAAlHQAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"reindent",
					null,
					"AQAAAD5RAAAAAAAASlEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPlEAAAAAAAA+UQAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BQAAAEpRAAAAAAAAS1EAAAAAAAAAAAAAS1EAAAAAAABMUQAAAAAAAAAAAABMUQAAAAAAAE1RAAAAAAAAAAAAAE1RAAAAAAAATlEAAAAAAAAAAAAATlEAAAAAAABPUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASlEAAAAAAABKUQAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE9RAAAAAAAAUVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT1EAAAAAAABPUQAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "bar.date"
					},
					"CAAAAFBRAAAAAAAAUVEAAAAAAAAAAAAAUVEAAAAAAABSUQAAAAAAAAAAAABSUQAAAAAAAFNRAAAAAAAAAAAAAFNRAAAAAAAAVFEAAAAAAAAAAAAAVFEAAAAAAABVUQAAAAAAAAAAAABVUQAAAAAAAFZRAAAAAAAAAAAAAFZRAAAAAAAAV1EAAAAAAAAAAAAAV1EAAAAAAABYUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUFEAAAAAAABQUQAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAGZRAAAAAAAAaFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZlEAAAAAAABmUQAAAAAAAAAAAAAAAFhA"
				],
				[
					452,
					1,
					"left_delete",
					null,
					"AQAAAGNSAAAAAAAAY1IAAAAAAAAkAAAALCBDb25zdGFudHMuRElTUExBWV9USU1FOiBkaXNwbGF5X2R0",
					"AQAAAAAAAAABAAAAh1IAAAAAAABjUgAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"paste",
					null,
					"AgAAAJJSAAAAAAAAmlIAAAAAAAAAAAAAmlIAAAAAAACaUgAAAAAAAA0AAAB1dGNfdGltZXN0YW1w",
					"AQAAAAAAAAABAAAAklIAAAAAAACfUgAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFhRAAAAAAAAWVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWFEAAAAAAABYUQAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": "f\"{"
					},
					"AwAAAFBRAAAAAAAAUVEAAAAAAAAAAAAAUVEAAAAAAABSUQAAAAAAAAAAAABSUQAAAAAAAFNRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUFEAAAAAAABQUQAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": "}:"
					},
					"AgAAAFtRAAAAAAAAXFEAAAAAAAAAAAAAXFEAAAAAAABdUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW1EAAAAAAABbUQAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAF1RAAAAAAAAXlEAAAAAAAAAAAAAXlEAAAAAAABfUQAAAAAAAAAAAABfUQAAAAAAAGBRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXVEAAAAAAABdUQAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAGBRAAAAAAAAYVEAAAAAAAAAAAAAYVEAAAAAAABiUQAAAAAAAAAAAABiUQAAAAAAAGNRAAAAAAAAAAAAAGNRAAAAAAAAZFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYFEAAAAAAABgUQAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAAGRRAAAAAAAAZVEAAAAAAAAAAAAAZVEAAAAAAABmUQAAAAAAAAAAAABmUQAAAAAAAGdRAAAAAAAAAAAAAGdRAAAAAAAAaFEAAAAAAAAAAAAAaFEAAAAAAABpUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZFEAAAAAAABkUQAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGlRAAAAAAAAalEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaVEAAAAAAABpUQAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGpRAAAAAAAAbFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAalEAAAAAAABqUQAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"left_delete",
					null,
					"AQAAAGxRAAAAAAAAbFEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbVEAAAAAAABtUQAAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAGxRAAAAAAAAbVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbFEAAAAAAABsUQAAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAAGtRAAAAAAAAbFEAAAAAAAAAAAAAbFEAAAAAAABtUQAAAAAAAAAAAABtUQAAAAAAAG5RAAAAAAAAAAAAAG5RAAAAAAAAb1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa1EAAAAAAABrUQAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG9RAAAAAAAAcVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb1EAAAAAAABvUQAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "bad"
					},
					"AwAAAHBRAAAAAAAAcVEAAAAAAAAAAAAAcVEAAAAAAAByUQAAAAAAAAAAAAByUQAAAAAAAHNRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcFEAAAAAAABwUQAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"left_delete",
					null,
					"AQAAAHJRAAAAAAAAclEAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAc1EAAAAAAABzUQAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "r.date"
					},
					"BgAAAHJRAAAAAAAAc1EAAAAAAAAAAAAAc1EAAAAAAAB0UQAAAAAAAAAAAAB0UQAAAAAAAHVRAAAAAAAAAAAAAHVRAAAAAAAAdlEAAAAAAAAAAAAAdlEAAAAAAAB3UQAAAAAAAAAAAAB3UQAAAAAAAHhRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAclEAAAAAAAByUQAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"paste",
					null,
					"AgAAALVSAAAAAAAAvVIAAAAAAAAAAAAAvVIAAAAAAAC9UgAAAAAAAAgAAABiYXIuZGF0ZQ",
					"AQAAAAAAAAABAAAAtVIAAAAAAAC9UgAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "int("
					},
					"BAAAALVSAAAAAAAAtlIAAAAAAAAAAAAAtlIAAAAAAAC3UgAAAAAAAAAAAAC3UgAAAAAAALhSAAAAAAAAAAAAALhSAAAAAAAAuVIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtVIAAAAAAAC1UgAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAMFSAAAAAAAAwlIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwVIAAAAAAADBUgAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"reindent",
					null,
					"AQAAAIhSAAAAAAAAlFIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiFIAAAAAAACIUgAAAAAAAAAAAAAAgHxA"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJRSAAAAAAAAlVIAAAAAAAAAAAAAlVIAAAAAAAChUgAAAAAAAAAAAACIUgAAAAAAAIhSAAAAAAAADAAAACAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAlFIAAAAAAACUUgAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"reindent",
					null,
					"AQAAAIhSAAAAAAAAlFIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiFIAAAAAAACIUgAAAAAAAAAAAAAAAFhA"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BgAAAJRSAAAAAAAAlVIAAAAAAAAAAAAAlVIAAAAAAAChUgAAAAAAAAAAAACiUgAAAAAAAKJSAAAAAAAADAAAACAgICAgICAgICAgIIhSAAAAAAAAiFIAAAAAAAAMAAAAICAgICAgICAgICAglVIAAAAAAACWUgAAAAAAAAAAAACWUgAAAAAAAJdSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlFIAAAAAAACUUgAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJdSAAAAAAAAmFIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl1IAAAAAAACXUgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "IBConnector.py",
			"settings":
			{
				"buffer_size": 8526,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "appLauncher.py",
			"redo_stack":
			[
				[
					9,
					1,
					"insert",
					{
						"characters": "yManager"
					},
					"CAAAAEsaAAAAAAAASxoAAAAAAAABAAAAckoaAAAAAAAAShoAAAAAAAABAAAAZUkaAAAAAAAASRoAAAAAAAABAAAAZ0gaAAAAAAAASBoAAAAAAAABAAAAYUcaAAAAAAAARxoAAAAAAAABAAAAbkYaAAAAAAAARhoAAAAAAAABAAAAYUUaAAAAAAAARRoAAAAAAAABAAAATUQaAAAAAAAARBoAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAATBoAAAAAAABMGgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAEQaAAAAAAAARRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBoAAAAAAABEGgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "tori"
					},
					"BAAAAEQaAAAAAAAARBoAAAAAAAABAAAAaUMaAAAAAAAAQxoAAAAAAAABAAAAckIaAAAAAAAAQhoAAAAAAAABAAAAb0EaAAAAAAAAQRoAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAARRoAAAAAAABFGgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "getHis"
					},
					"BwAAAEAaAAAAAAAAQBoAAAAAAAABAAAAcz8aAAAAAAAAPxoAAAAAAAABAAAAaT4aAAAAAAAAPhoAAAAAAAABAAAASD0aAAAAAAAAPRoAAAAAAAABAAAAdDwaAAAAAAAAPBoAAAAAAAABAAAAZTwaAAAAAAAAThoAAAAAAAAAAAAAOxoAAAAAAAA7GgAAAAAAAAEAAABn",
					"AQAAAAAAAAABAAAAQRoAAAAAAABBGgAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 9121,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "dataHandling/HistoryManagement/SpecBufferedManager.py",
			"settings":
			{
				"buffer_size": 4191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "apps/comparisons/ComparisonProcessor.py",
			"settings":
			{
				"buffer_size": 15015,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"python syntax",
				"Build With: Python - Syntax Check"
			],
			[
				"json",
				"Pretty JSON: Format JSON"
			],
			[
				"prett",
				"Pretty JSON: Format JSON"
			],
			[
				"install packe",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"Install Package Control",
				"Install Package Control"
			],
			[
				"set syntax html",
				"Set Syntax: HTML"
			],
			[
				"wrap",
				"HTML: Wrap Selection With Tag"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 443.0,
		"history":
		[
			"python3 --version",
			"python --version",
			"import sys; print(sys.executable)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/comparisons",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/optionVisualization",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/junkFolder",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/run",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/customWidgets",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/customWidgets/PlotWidgets"
	],
	"file_history":
	[
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/customWidgets/PlotWidgets/ComparisonPlotWidget.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/SymbolManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/movers/moversLists.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/generalFunctionality/UIFunctions.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/tradeMaker/tradeMaker.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/generalFunctionality/SymbolFinderImpl.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/listManaging/listManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/listManaging/ListManagerWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/customWidgets/PlotWidgets/CandlePlotWidget.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/movers/MoversProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/Constants.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/FinazonBufferedManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/BufferedManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/generalFunctionality/GenFunctions.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/IBConnectivity.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/DataStructures.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/UserDataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/DataBuffer.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/customWidgets/PlotWidgets/OptionPlotWidget.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/customWidgets/PlotWidgets/OptionAllPlotWidget.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/DataProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/uiComps/QHelper.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/OptionManagement/OptionChainManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/optionVisualization/VisualizationWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/OptionManagement/ComputableOptionFrame2D.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/optionVisualization/optionsVisualization.py",
		"/Users/vriesdejelmer/Dropbox/hunTax/2023/sns_rente.py",
		"/Users/vriesdejelmer/Dropbox/hunTax/2023/degiroScript_hun_LIFO.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/OptionManagement/ComputableOptionFrame.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/optionPositions/optionsPositionListing.py",
		"/Users/vriesdejelmer/Downloads/meegekochteRente.html",
		"/Users/vriesdejelmer/Dropbox/hunTax/2023/degiro_nomijelmer.csv",
		"/Users/vriesdejelmer/Downloads/degiro_nomijelmer.csv",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/junkFolder/back_test_momentum.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/TradeManagement/PositionDataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/HistoricalDataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/TradeManagement/OrderManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/IndicatorProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/autoTrader/autoTrader.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/autoTrader/TrackerProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/appLauncher.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/IBConnector.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/DataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/AppLauncherWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/tradeMaker/TradingWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/autoTrader/LiveBufferedManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/IBConnectivityNew.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/HistoricalDataManagementOld.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/comparisons/ComparisonDataWrapper.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/comparisons/ComparisonProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/HistoryManagerImproved.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/apps/tradeMaker/TickerProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/SymbolManagerImproved.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/dataHandling/HistoryManagement/FinazonDataManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/junkFolder/testing.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/IB_apps.sublime-project",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_apps/junkFolder/order_test.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/junkFolder/order_test.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/DataBuffer.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/BufferedManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/HistoricalDataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/autoTrader/TrackerProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/IBConnector.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/IndicatorProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/appLauncher.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/TradeManagement/OrderManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/tradeMaker/TickerProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/tradeMaker/tradeMaker.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/generalFunctionality/GenFunctions.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/polygonDownload/dataDownloader.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/polygonDownload/DataDownloaderWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/polygonDownload/polygonDownloader.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/junkFolder/back_test_momentum.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/Constants.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/autoTrader/autoTrader.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/optionPositions/OptionPositionWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/AppLauncherWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/tradeMaker/TradingWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/positionManaging/positionManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/alerting/alertManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/autoTrader/AutoTraderWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/alerting/AlertProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/alerting/AlertWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/UserDataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/FinazonDataManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/tradeMaker/OrderDataModel.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/portfolioiManaging/portfolioManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/customWidgets/StockListTab.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/run/suite",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/qtGeneration/AppLauncher_UI.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/positionManaging/PositionWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/positionManaging/__pycache__/PositionWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/dataDownloading/DataDownloaderWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/auto_trader/TrackerProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/auto_trader/AutoTraderWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/qtGeneration/AutoTrader_UI.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/auto_trader/autoTrader.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/auto_trader/alertManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/OptionManagement/OptionChainManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/comparisons/ComparisonWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/junkFolder/copyright_header.txt",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/IBConnectivity.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/TelegramBot.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/copyright_bash.sh",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/junkFolder/copyright_bash.sh",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/junkFolder/bash.sh",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/generalUIFunctionality.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/comparisons/ComparisonDataWrapper.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/comparisons/comparisonLists.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/DataProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/positionManaging/PositionManagerWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/comparisons/ComparisonProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/movers/MoversWindow.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/movers/moversLists.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/customWidgets/PlotWidgets/ComparisonPlotWidget.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/customWidgets/OptionTabWidget.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/TradeManagement/PositionDataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/optionPositions/optionsPositionListing.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/uiComps/TableModels.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/SymbolManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/IndicatorProcessor (Jelmers-Mac-mini.local's conflicted copy 2024-04-01).py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/LiveBufferedManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/listManaging/listManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/dataDownloading/dataDownloader.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/apps/movers/MoversProcessor.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/DataManagement.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/dataHandling/HistoryManagement/FinazonBufferedManager.py",
		"/Users/vriesdejelmer/Dropbox/pythonProjects/IB_trading_apps/.gitignore"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"def hist",
			"reqHist",
			"SpecBufferedDataManager",
			"getHistoryManagerIB",
			"def getBufferedManager",
			"ComparisonList(",
			"self.buffered_manager.fetchStockDataForPeriod(self.selected_bar_type, start_date, end_date)",
			"fetchStockDataForPeriod",
			"f.buffered_manager.fetchStockDataForPeriod(self.selected_bar_type, start_d",
			"generateTimeIndices",
			"ComparisonProcessor.generateTimeIndices",
			"utcnow",
			"def subtract",
			"getDataRanges",
			"create_request_signal",
			"createRequestsForContract",
			"date",
			"range",
			"if (existing_ranges[-1][1] > standard_begin_date):",
			"def standardBeginDateFor",
			"if (existing_ranges[-1][1] > standard_begin_date):",
			"y_diff = (current_dateTime-timestamp).days",
			"datetime",
			"now_time = ",
			"ay_diff = (current_dateTime-timestamp).days",
			"ar_data.index = (unix_time_index - pd.Timestamp(Constants.BEGINNING_OF_TIME, tz='America/New_York",
			"def subtract_days",
			"now_time =",
			"now_time",
			"stale",
			"def subtract_days",
			"subtract_days",
			"period_functions",
			"tock_frame = stock_frame[stock_frame.index >= max_date]",
			"lf.calculateMinMax(self.time_period, updated_list=updates_uids)",
			"datetime",
			"timedelta",
			"datetime",
			"stale_delay_min",
			"stale_delay_mi",
			"stale_delay_min",
			"time_del = (now_time - last_five_min_mark)",
			"class Constants",
			"utc",
			"pytz",
			"rument_time_zone = self._contract_details[uid].time_zone",
			"_historicalDFs[",
			"_historicalDFs = ",
			"pdDateFromIBString",
			"def pdDateFromIBString",
			"def hist",
			"stock",
			"s",
			"print(ty",
			"DetailO",
			"class DetailObject",
			"lObject = DetailObject(symbol=contract.symbol, exchange=exchange, long_name=co",
			"class DetailObject",
			"DetailObject(",
			"ls = DetailObject(symbol=value[Constants.SYMBOL], exchange=value['exchange'], numeric_id=uid)",
			"DetailObject(",
			"DetailObject",
			"class DetailObject",
			"DetailObject(",
			"DetailOb",
			"_item_list",
			"class SymbolManager",
			"selectedContract",
			"def selectedContract",
			"def returnSe",
			"pdDateFromIBString",
			"def histor",
			"conId",
			"contrId",
			"contractId",
			"contractID",
			"Where are these coming",
			"THIS SHOULD BE MADE DEPENDENT ON WHETHER THE OWNER ",
			"{uid}",
			" + uid",
			"self.data_folder + uid",
			"self.data_folder + uid + ",
			"self.data_folder + uid + '_' + bar_type ",
			"name = self.data_folder + uid + '_' + bar_type ",
			"or key, item in self.index_list.items():",
			"str(numeric_id) == button.objectName(",
			"findRowForValue",
			"Button(",
			"str(",
			"numeric_id)",
			"elete_button.setObjectName(numeric_id)",
			"contractUpdate",
			"class SymbolFinderImplementation",
			"contractUpdate",
			"self.contractUpdate",
			"ListManager.apiUpdat",
			"def re",
			"UserDataManager.readStockList",
			"getListName",
			"print(file",
			".json",
			"getStockList",
			"stock_list = ",
			"for index, (key, details) in enumerate(self.stock_list.items()):",
			"fetchUnderlyingPrice",
			"derlyingPrice.connect(self.option_manager.makeStockSelection, type=Qt.Di",
			"json_dict",
			"\"stock_list",
			"addToBuffer",
			"setBufferFor",
			"update",
			"DataBuffer",
			"expiration_plot",
			"strike_grouped_plot",
			"print(",
			"Computable2DDataFrame.calculateStrikeGrouped ",
			"connectCallback",
			"_all_option_frame",
			"Computable2DDataFrame",
			"ReadOnlyFrameWrapper",
			"def has_da",
			"has_da",
			"self._computable_frame",
			".connect(",
			"Strike",
			"strike",
			"min",
			"getBufferedFrame"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"dataHandling.IBConnectivity",
			"SymbolManager",
			"from dataHandling.UserDataManagement"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": false,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "dataHandling/HistoryManagement/HistoricalDataManagement.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26486,
						"regions":
						{
						},
						"selection":
						[
							[
								21144,
								21144
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9117.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "IBConnector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8526,
						"regions":
						{
						},
						"selection":
						[
							[
								3848,
								3867
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1105.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "appLauncher.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9121,
						"regions":
						{
						},
						"selection":
						[
							[
								5835,
								5835
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2379.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "dataHandling/HistoryManagement/SpecBufferedManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4191,
						"regions":
						{
						},
						"selection":
						[
							[
								887,
								910
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 175.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "apps/comparisons/ComparisonProcessor.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15015,
						"regions":
						{
						},
						"selection":
						[
							[
								2384,
								2407
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 455.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 116.0
	},
	"output.find_results":
	{
		"height": 104.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "IB_apps.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ib",
				"IBConnectivity.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 237.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
